name: Test

on:
  push:
    branches: [ main, develop, fix-pipeline ]
  pull_request:
    branches: [ main, develop, fix-pipeline ]
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.22.x, 1.23.x, 1.24.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    # Windows throws false positives with linting because of CRLF / goimports incompatibility
    - name: Set git to use LF
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run tests (Windows)
      if: matrix.platform == 'windows-latest'
      shell: powershell
      run: go test ./...
      
    - name: Run tests (Unix)
      if: matrix.platform != 'windows-latest'
      shell: bash
      run: go test -race ./...
      
    - name: Run tests with coverage
      if: matrix.platform == 'ubuntu-latest' && matrix.go-version == '1.24.x'
      shell: bash
      run: |
        go test -race -coverprofile coverage.out ./...
      
    - name: Upload coverage to Codecov
      if: matrix.platform == 'ubuntu-latest' && matrix.go-version == '1.24.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        # Use latest v2.x version which supports the new config format and Go 1.24+
        version: v2.5.0
        args: --timeout=5m
        skip-cache: true
        install-mode: binary

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
        
    - name: Install gosec
      run: |
        GOSEC_VERSION=v2.21.4
        curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $GOSEC_VERSION
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run gosec
      run: |
        gosec ./...
