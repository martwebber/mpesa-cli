name: Package Manager Test

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 8 * * *'  # Daily at 8 AM UTC
  push:
    tags:
      - '*'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'scripts/install-test.sh'
      - '.goreleaser/**'

jobs:
  homebrew:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/install-test.sh
          sparse-checkout-cone-mode: false
          
      - name: Test Homebrew installation
        run: bash scripts/install-test.sh homebrew
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

  apt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/install-test.sh
          sparse-checkout-cone-mode: false
          
      - name: Test APT installation
        run: bash scripts/install-test.sh apt
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

  yum:
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - name: Install dependencies
        run: |
          yum install -y git curl
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/install-test.sh
          sparse-checkout-cone-mode: false
          
      - name: Test YUM installation
        run: bash scripts/install-test.sh yum
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

  scoop:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/install-test.sh
          sparse-checkout-cone-mode: false
          
      - name: Setup Scoop
        uses: MinoruSekine/setup-scoop@v4
        
      - name: Test Scoop installation
        shell: powershell
        run: bash scripts/install-test.sh scoop
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/install-test.sh
          sparse-checkout-cone-mode: false
          
      - name: Test Docker installation
        run: bash scripts/install-test.sh docker
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

  # Test installation methods that don't require package managers
  direct-download:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download and test latest release
        shell: bash
        run: |
          # Determine OS and architecture
          case "$RUNNER_OS" in
            Linux)
              OS="linux"
              ;;
            macOS)
              OS="macos"
              ;;
            Windows)
              OS="windows"
              ;;
          esac
          
          case "$RUNNER_ARCH" in
            X64)
              ARCH="x86_64"
              ;;
            ARM64)
              ARCH="arm64"
              ;;
          esac
          
          # Get latest release URL
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/martwebber/mpesa-cli/releases/latest)
          
          if [[ "$OS" == "windows" ]]; then
            DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://.*mpesa-cli.*${OS}.*${ARCH}\.zip" | head -1)
            FILE_EXT="zip"
          else
            DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://.*mpesa-cli.*${OS}.*${ARCH}\.tar\.gz" | head -1)
            FILE_EXT="tar.gz"
          fi
          
          if [[ -n "$DOWNLOAD_URL" ]]; then
            echo "Downloading from: $DOWNLOAD_URL"
            curl -L -o "mpesa-cli.$FILE_EXT" "$DOWNLOAD_URL"
            
            # Extract and test
            if [[ "$FILE_EXT" == "zip" ]]; then
              unzip -q "mpesa-cli.zip"
              ./mpesa-cli.exe --version
            else
              tar -xzf "mpesa-cli.tar.gz"
              ./mpesa-cli --version
            fi
            
            echo "✅ Direct download test passed for $OS $ARCH"
          else
            echo "❌ Could not find download URL for $OS $ARCH"
            exit 1
          fi