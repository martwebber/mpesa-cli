name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Run all CI checks before release
  pre-release-validation:
    uses: ./.github/workflows/test.yml

  # Release job - only runs after successful validation
  release:
    runs-on: ubuntu-latest
    needs: pre-release-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x
        
    # Ensure package manager repositories exist before GoReleaser tries to use them
    - name: Setup package repositories
      run: |
        # Create homebrew-tap repository if it doesn't exist
        if ! gh repo view ${{ github.repository_owner }}/homebrew-tap &> /dev/null; then
          echo "Creating homebrew-tap repository..."
          gh repo create homebrew-tap --public --description "Homebrew formulae for M-Pesa CLI"
          
          # Initialize with basic structure
          git clone https://github.com/${{ github.repository_owner }}/homebrew-tap.git /tmp/homebrew-tap
          cd /tmp/homebrew-tap
          mkdir -p Formula
          cat > README.md << EOF
        # Homebrew Tap for M-Pesa CLI
        
        ## Installation
        \`\`\`bash
        brew tap ${{ github.repository_owner }}/tap
        brew install mpesa-cli
        \`\`\`
        EOF
          git add .
          git -c user.name="GoReleaser Bot" -c user.email="bot@goreleaser.com" commit -m "Initialize Homebrew tap"
          git push origin main
          cd -
          rm -rf /tmp/homebrew-tap
        else
          echo "homebrew-tap repository already exists"
        fi
        
        # Create scoop-bucket repository if it doesn't exist  
        if ! gh repo view ${{ github.repository_owner }}/scoop-bucket &> /dev/null; then
          echo "Creating scoop-bucket repository..."
          gh repo create scoop-bucket --public --description "Scoop bucket for M-Pesa CLI"
          
          # Initialize with basic structure
          git clone https://github.com/${{ github.repository_owner }}/scoop-bucket.git /tmp/scoop-bucket
          cd /tmp/scoop-bucket
          cat > README.md << EOF
        # Scoop Bucket for M-Pesa CLI
        
        ## Installation
        \`\`\`powershell
        scoop bucket add ${{ github.repository_owner }} https://github.com/${{ github.repository_owner }}/scoop-bucket.git
        scoop install mpesa-cli
        \`\`\`
        EOF
          git add .
          git -c user.name="GoReleaser Bot" -c user.email="bot@goreleaser.com" commit -m "Initialize Scoop bucket"
          git push origin main
          cd -
          rm -rf /tmp/scoop-bucket
        else
          echo "scoop-bucket repository already exists"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify

    # Generate completions for packaging
    - name: Generate completions
      run: |
        go build -o mpesa-cli-temp .
        ./mpesa-cli-temp completion bash > completions/mpesa-cli.bash
        ./mpesa-cli-temp completion zsh > completions/mpesa-cli.zsh
        ./mpesa-cli-temp completion fish > completions/mpesa-cli.fish
        ./mpesa-cli-temp completion powershell > completions/mpesa-cli.ps1
        rm mpesa-cli-temp
        
    # Login to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Set up QEMU for multi-arch builds
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Install cosign for signing
    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    # Install syft for SBOM generation
    - name: Install syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    # Run GoReleaser
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Sign container images with cosign
    - name: Sign container images
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        images=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ghcr.io/martwebber/mpesa-cli | grep -v REPOSITORY)
        for image in $images; do
          echo "Signing $image"
          cosign sign --yes $image
        done

  # Security scan of released artifacts
  security-scan:
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/martwebber/mpesa-cli:${{ github.ref_name }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Create GitHub Deployment
  create-deployment:
    runs-on: ubuntu-latest
    needs: [release, security-scan]
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Create Deployment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.ref,
            environment: 'production',
            description: 'Release ${{ github.ref_name }}',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            description: 'Successfully released ${{ github.ref_name }}',
            environment_url: 'https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}'
          });

  # Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [release, security-scan, create-deployment]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release ${{ github.ref_name }} completed successfully!"
        echo "üì¶ Packages published to:"
        echo "  - GitHub Releases"
        echo "  - GitHub Container Registry"
        echo "  - Homebrew (pending tap update)"
        echo "  - Scoop (pending bucket update)"
        
    - name: Notify Failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Check the logs for details."
        exit 1